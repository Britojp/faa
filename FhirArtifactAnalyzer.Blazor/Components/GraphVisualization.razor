@inject IJSRuntime JSRuntime
@inject GraphService GraphService
@implements IDisposable

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">Resource Relationship Graph</h5>
    </div>
    <div class="card-body">
        <div class="d-flex justify-content-between mb-3">
            <div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary" @onclick="ResetZoom">
                        <i class="bi bi-zoom-out me-2"></i> Reset View
                    </button>
                    <button type="button" class="btn btn-outline-primary" @onclick="ClearHighlight">
                        <i class="bi bi-eraser me-2"></i> Clear Highlight
                    </button>
                </div>
            </div>
            <div>
                <button type="button" class="btn btn-primary" @onclick="ApplyFilters">
                    <i class="bi bi-funnel me-2"></i> Apply Filters
                </button>
            </div>
        </div>
        
        <div class="graph-container border rounded p-2" id="@GraphContainerId" style="min-height: 400px;"></div>
        
        <div class="d-flex mt-3 justify-content-between align-items-center">
            <p class="text-muted small mt-1 mb-0">
                @if (Nodes?.Any() == true)
                {
                    <span>Showing @Nodes.Count nodes and @Links.Count connections</span>
                }
                else
                {
                    <span>No data to display. Upload FHIR artifacts to begin.</span>
                }
            </p>
            
            <button type="button" class="btn btn-outline-secondary" 
                   @onclick="ExportGraph"
                   disabled="@(Nodes?.Any() != true)">
                <i class="bi bi-download me-2"></i> Export Graph as PNG
            </button>
        </div>
    </div>
</div>

<style>
    .graph-container {
        width: 100%;
        height: 500px;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
    }
</style>

@code {
    [Parameter] public List<FhirResource> Resources { get; set; }
    [Parameter] public ArtifactFilter Filter { get; set; }
    [Parameter] public EventCallback<string> OnNodeSelected { get; set; }
    
    private string GraphContainerId = "graph-container";
    private List<GraphNode> Nodes = new List<GraphNode>();
    private List<GraphLink> Links = new List<GraphLink>();
    private bool _graphInitialized = false;
    private DotNetObjectReference<GraphVisualization> _objectReference;
    
    protected override void OnInitialized()
    {
        _objectReference = DotNetObjectReference.Create(this);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeGraph();
        }
        
        if (Resources != null && Resources.Any() && !_graphInitialized)
        {
            await RenderGraph();
            _graphInitialized = true;
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Resources != null && Resources.Any())
        {
            await RenderGraph();
        }
    }
    
    private async Task InitializeGraph()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("d3Interop.initializeGraph", GraphContainerId, new 
            {
                NodeRadius = 10,
                LinkDistance = 100,
                ZoomEnabled = true
            });
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing graph: {ex.Message}");
        }
    }
    
    private async Task RenderGraph()
    {
        try
        {
            // Generate graph data from resources
            var graphData = GraphService.BuildGraphData(Resources);
            Nodes = graphData.Nodes;
            Links = graphData.Links;
            
            // Apply any filters
            if (Filter != null)
            {
                var filtered = GraphService.ApplyFilter(Nodes, Links, Filter);
                Nodes = filtered.Nodes;
                Links = filtered.Links;
            }
            
            // Render the graph
            await JSRuntime.InvokeVoidAsync("d3Interop.renderGraph", Nodes, Links);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error rendering graph: {ex.Message}");
        }
    }
    
    private async Task ResetZoom()
    {
        await JSRuntime.InvokeVoidAsync("d3Interop.resetZoom");
    }
    
    private async Task ClearHighlight()
    {
        await JSRuntime.InvokeVoidAsync("d3Interop.resetHighlighting");
    }
    
    private async Task ApplyFilters()
    {
        if (Filter != null)
        {
            var graphData = GraphService.BuildGraphData(Resources);
            var filtered = GraphService.ApplyFilter(graphData.Nodes, graphData.Links, Filter);
            Nodes = filtered.Nodes;
            Links = filtered.Links;
            
            await JSRuntime.InvokeVoidAsync("d3Interop.renderGraph", Nodes, Links);
        }
    }
    
    private async Task ExportGraph()
    {
        try
        {
            // This function is implemented in the ExportService and will be called via JSInterop
            await JSRuntime.InvokeVoidAsync("d3Interop.exportPng");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error exporting graph: {ex.Message}");
        }
    }
    
    [JSInvokable]
    public async Task OnNodeClicked(string nodeId)
    {
        await OnNodeSelected.InvokeAsync(nodeId);
        await JSRuntime.InvokeVoidAsync("d3Interop.highlightNode", nodeId);
    }
    
    public void Dispose()
    {
        _objectReference?.Dispose();
    }
}
