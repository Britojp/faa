@inject FhirApiService FhirApiService

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">FHIR Resources (@Resources.Count)</h5>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label for="searchResources" class="form-label">Search Resources</label>
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control" id="searchResources" 
                       placeholder="Search by name, URL, or description"
                       @bind="@_searchTerm" 
                       @bind:event="oninput" />
            </div>
        </div>
        
        <div class="mb-3">
            <label for="resourceTypes" class="form-label">Filter by Resource Type</label>
            <select class="form-select" id="resourceTypes" multiple
                    @onchange="HandleResourceTypesChanged">
                @foreach (var type in _allResourceTypes)
                {
                    <option value="@type" selected="@_selectedTypes.Contains(type)">@type</option>
                }
            </select>
        </div>
        
        <div class="mb-3">
            <label for="validationStatus" class="form-label">Validation Status</label>
            <select class="form-select" id="validationStatus" 
                    @bind="_validationStatus" 
                    @bind:event="onchange">
                <option value="">All</option>
                <option value="valid">Valid</option>
                <option value="invalid">Invalid</option>
                <option value="unknown">Unknown</option>
            </select>
        </div>
        
        <div class="resource-list">
            @if (!Resources.Any())
            {
                <div class="alert alert-info">
                    No resources available. Upload FHIR artifacts to begin.
                </div>
            }
            else if (!_filteredResources.Any())
            {
                <div class="alert alert-warning">
                    No resources match the current filters.
                </div>
            }
            else
            {
                <div class="list-group">
                    @foreach (var resource in _filteredResources)
                    {
                        <button type="button" class="list-group-item list-group-item-action"
                                @onclick="() => OnResourceSelected.InvokeAsync(resource)">
                            <div class="d-flex">
                                <div>
                                    <i class="@GetResourceIconClass(resource.ResourceType) @GetResourceTextColorClass(resource.ResourceType)"></i>
                                </div>
                                <div class="ms-3">
                                    <div>@resource.GetFormattedName()</div>
                                    <small class="text-muted">@resource.CanonicalUrl</small>
                                    <div class="d-flex align-items-center mt-1">
                                        @if (resource.ValidationResults?.IsValid == true)
                                        {
                                            <span class="badge bg-success">Valid</span>
                                        }
                                        else if (resource.ValidationResults?.IsValid == false)
                                        {
                                            <span class="badge bg-danger">
                                                Invalid (@(resource.ValidationResults.Issues?.Count ?? 0) issues)
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Not Validated</span>
                                        }
                                        
                                        @if (!string.IsNullOrEmpty(resource.Version))
                                        {
                                            <span class="badge bg-info ms-2">v@(resource.Version)</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </button>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .list-group-item {
        transition: background-color 0.2s;
    }
    
    .list-group-item:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>

@code {
    [Parameter] public List<FhirResource> Resources { get; set; } = new List<FhirResource>();
    [Parameter] public EventCallback<FhirResource> OnResourceSelected { get; set; }
    
    private string _searchTerm = "";
    private HashSet<string> _selectedTypes = new HashSet<string>();
    private string _validationStatus = "";
    private List<FhirResource> _filteredResources = new List<FhirResource>();
    
    private List<string> _allResourceTypes = new List<string>
    {
        "StructureDefinition",
        "CodeSystem",
        "ValueSet",
        "CapabilityStatement",
        "ImplementationGuide",
        "OperationDefinition",
        "SearchParameter"
    };
    
    protected override void OnParametersSet()
    {
        // Apply filters whenever the resource list changes
        ApplyFilters();
    }
    
    private void ApplyFilters()
    {
        _filteredResources = Resources.ToList();
        
        // Apply text search filter
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredResources = _filteredResources.Where(r => r.ContainsSearchTerm(_searchTerm)).ToList();
        }
        
        // Apply resource type filter
        if (_selectedTypes.Any())
        {
            _filteredResources = _filteredResources.Where(r => _selectedTypes.Contains(r.ResourceType)).ToList();
        }
        
        // Apply validation status filter
        if (!string.IsNullOrEmpty(_validationStatus))
        {
            _filteredResources = _filteredResources.Where(r => 
                (_validationStatus == "valid" && r.ValidationResults?.IsValid == true) ||
                (_validationStatus == "invalid" && r.ValidationResults?.IsValid == false) ||
                (_validationStatus == "unknown" && r.ValidationResults?.IsValid == null)
            ).ToList();
        }
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        // Watch for changes to filter properties
        if (_searchTerm != null || _selectedTypes != null || _validationStatus != null)
        {
            ApplyFilters();
            StateHasChanged();
        }
    }
    
    private string GetResourceIconClass(string resourceType)
    {
        return resourceType switch
        {
            "StructureDefinition" => "bi bi-diagram-3",
            "CodeSystem" => "bi bi-code-square",
            "ValueSet" => "bi bi-list-ul",
            "CapabilityStatement" => "bi bi-gear",
            "ImplementationGuide" => "bi bi-book",
            "OperationDefinition" => "bi bi-braces",
            "SearchParameter" => "bi bi-search",
            _ => "bi bi-file-earmark"
        };
    }
    
    private string GetResourceTextColorClass(string resourceType)
    {
        return resourceType switch
        {
            "StructureDefinition" => "text-primary",
            "CodeSystem" => "text-danger",
            "ValueSet" => "text-warning",
            "CapabilityStatement" => "text-success",
            "ImplementationGuide" => "text-secondary",
            "OperationDefinition" => "text-info",
            "SearchParameter" => "text-info",
            _ => "text-muted"
        };
    }
    
    private void HandleResourceTypesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            // Get selected options from multi-select
            var selectedOptions = ((IEnumerable<string>)e.Value)
                                  .Where(v => !string.IsNullOrEmpty(v))
                                  .ToList();
            
            _selectedTypes = new HashSet<string>(selectedOptions);
            ApplyFilters();
            StateHasChanged();
        }
    }
}
