<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">Search & Filters</h5>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label for="searchText" class="form-label">Search Text</label>
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control" id="searchText" 
                       placeholder="Search by name, URL, or description"
                       @bind="Filter.SearchText" />
            </div>
        </div>
        
        <div class="mb-3">
            <label for="resourceTypes" class="form-label">Resource Types</label>
            <div>
                @foreach (var resourceType in _availableResourceTypes)
                {
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" 
                               id="type-@resourceType" 
                               checked="@IsResourceTypeSelected(resourceType)"
                               @onchange="e => ToggleResourceType(resourceType, e.Value != null ? (bool)e.Value : false)">
                        <label class="form-check-label" for="type-@resourceType">@resourceType</label>
                    </div>
                }
            </div>
        </div>
        
        <div class="mb-3">
            <label for="validationStatus" class="form-label">Validation Status</label>
            <select class="form-select" id="validationStatus"
                    @bind="Filter.ValidationStatus">
                <option value="all">All</option>
                <option value="valid">Valid</option>
                <option value="invalid">Invalid</option>
                <option value="unknown">Unknown</option>
            </select>
        </div>
        
        <div class="mb-3">
            <label for="referencedResource" class="form-label">Referenced Resource</label>
            <input type="text" class="form-control" id="referencedResource"
                   placeholder="Filter by resource that references or is referenced by"
                   @bind="Filter.ReferencedResource" />
            <div class="form-text">Enter canonical URL or resource ID</div>
        </div>
        
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-outline-secondary me-2" @onclick="ClearFilters">
                Clear Filters
            </button>
            <button type="button" class="btn btn-primary" @onclick="ApplyFiltersCommand">
                Apply Filters
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public ArtifactFilter Filter { get; set; } = new ArtifactFilter();
    [Parameter] public EventCallback<ArtifactFilter> OnFiltersApplied { get; set; }
    
    private List<string> _availableResourceTypes = new List<string>
    {
        "StructureDefinition",
        "CodeSystem",
        "ValueSet",
        "CapabilityStatement",
        "ImplementationGuide",
        "OperationDefinition",
        "SearchParameter"
    };
    
    protected override void OnInitialized()
    {
        if (Filter.ResourceTypes == null)
        {
            Filter.ResourceTypes = new List<string>();
        }
    }
    
    private bool IsResourceTypeSelected(string resourceType)
    {
        return Filter.ResourceTypes != null && Filter.ResourceTypes.Contains(resourceType);
    }
    
    private void ToggleResourceType(string resourceType, bool isSelected)
    {
        if (Filter.ResourceTypes == null)
        {
            Filter.ResourceTypes = new List<string>();
        }
        
        if (isSelected && !Filter.ResourceTypes.Contains(resourceType))
        {
            Filter.ResourceTypes.Add(resourceType);
        }
        else if (!isSelected && Filter.ResourceTypes.Contains(resourceType))
        {
            Filter.ResourceTypes.Remove(resourceType);
        }
    }
    
    private async Task ApplyFiltersCommand()
    {
        await OnFiltersApplied.InvokeAsync(Filter);
    }
    
    private async Task ClearFilters()
    {
        Filter = new ArtifactFilter() 
        { 
            ResourceTypes = new List<string>(),
            ValidationStatus = "all",
            SearchText = "",
            ReferencedResource = ""
        };
        
        StateHasChanged();
        await OnFiltersApplied.InvokeAsync(Filter);
    }
}
