@inject FhirApiService FhirApiService
@inject IJSRuntime JSRuntime

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">FHIR Artifact Statistics</h5>
    </div>
    <div class="card-body">
        @if (Resources.Count == 0)
        {
            <div class="alert alert-info">
                No artifacts have been analyzed yet. Upload FHIR artifacts to generate statistics.
            </div>
        }
        else
        {
            <div class="row mb-4 g-3">
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-light shadow-sm">
                        <div class="card-body text-center">
                            <i class="bi bi-archive text-primary fs-1"></i>
                            <h2 class="mt-2 mb-0">@_statistics.TotalArtifacts</h2>
                            <p class="text-muted">Total Artifacts</p>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-light shadow-sm">
                        <div class="card-body text-center">
                            <i class="bi bi-link-45deg text-secondary fs-1"></i>
                            <h2 class="mt-2 mb-0">@_statistics.TotalReferences</h2>
                            <p class="text-muted">Total References</p>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-light shadow-sm">
                        <div class="card-body text-center">
                            <i class="bi bi-check-circle text-success fs-1"></i>
                            <h2 class="mt-2 mb-0">@(_statistics.ValidationStatus.GetValueOrDefault("valid", 0))</h2>
                            <p class="text-muted">Valid Resources</p>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-3 col-sm-6">
                    <div class="card bg-light shadow-sm">
                        <div class="card-body text-center">
                            <i class="bi bi-exclamation-circle text-danger fs-1"></i>
                            <h2 class="mt-2 mb-0">@(_statistics.ValidationStatus.GetValueOrDefault("invalid", 0))</h2>
                            <p class="text-muted">Invalid Resources</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <h6 class="mb-3">Resource Types</h6>
            
            <div class="row">
                <div class="col-md-6">
                    <canvas id="resourceTypesChart" width="300" height="300"></canvas>
                </div>
                <div class="col-md-6">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Resource Type</th>
                                    <th>Count</th>
                                    <th>Percentage</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var stat in _resourceTypeStats)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <i class="@GetResourceIconClass(stat.Type) @GetResourceTextColorClass(stat.Type) me-2"></i>
                                                @stat.Type
                                            </div>
                                        </td>
                                        <td>@stat.Count</td>
                                        <td>@($"{stat.Percentage:0.0}%")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<FhirResource> Resources { get; set; } = new List<FhirResource>();
    
    private Statistics _statistics = new Statistics();
    private double[] _chartData = Array.Empty<double>();
    private string[] _chartLabels = Array.Empty<string>();
    private List<ResourceTypeStatistic> _resourceTypeStats = new List<ResourceTypeStatistic>();
    
    protected override void OnParametersSet()
    {
        if (Resources.Any())
        {
            // Generate statistics
            _statistics = Statistics.GenerateFrom(Resources);
            
            // Prepare chart data
            GenerateChartData();
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Resources.Any())
        {
            await RenderChartAsync();
        }
    }

    private async Task RenderChartAsync()
    {
        if (_chartData.Length > 0)
        {
            // Create color array for chart
            var colors = _resourceTypeStats.Select(s => GetChartColor(s.Type)).ToArray();
            
            // Create chart using Chart.js
            await JSRuntime.InvokeVoidAsync("createPieChart", "resourceTypesChart", _chartLabels, _chartData, colors);
        }
    }
    
    private void GenerateChartData()
    {
        // Convert dictionary to list of stats
        _resourceTypeStats = _statistics.ArtifactsByType
            .Select(kvp => new ResourceTypeStatistic 
            { 
                Type = kvp.Key, 
                Count = kvp.Value,
                Percentage = _statistics.TotalArtifacts > 0 
                    ? (double)kvp.Value / _statistics.TotalArtifacts * 100 
                    : 0
            })
            .OrderByDescending(s => s.Count)
            .ToList();
            
        // Prepare data for the pie chart
        _chartData = _resourceTypeStats.Select(s => (double)s.Count).ToArray();
        _chartLabels = _resourceTypeStats.Select(s => s.Type).ToArray();
    }
    
    private string GetResourceIconClass(string resourceType)
    {
        return resourceType switch
        {
            "StructureDefinition" => "bi bi-diagram-3",
            "CodeSystem" => "bi bi-code-square",
            "ValueSet" => "bi bi-list-ul",
            "CapabilityStatement" => "bi bi-gear",
            "ImplementationGuide" => "bi bi-book",
            "OperationDefinition" => "bi bi-braces",
            "SearchParameter" => "bi bi-search",
            _ => "bi bi-file-earmark"
        };
    }
    
    private string GetResourceTextColorClass(string resourceType)
    {
        return resourceType switch
        {
            "StructureDefinition" => "text-primary",
            "CodeSystem" => "text-danger",
            "ValueSet" => "text-warning",
            "CapabilityStatement" => "text-success",
            "ImplementationGuide" => "text-secondary",
            "OperationDefinition" => "text-info",
            "SearchParameter" => "text-info",
            _ => "text-muted"
        };
    }
    
    private string GetChartColor(string resourceType)
    {
        return resourceType switch
        {
            "StructureDefinition" => "#0d6efd", // primary
            "CodeSystem" => "#dc3545", // danger
            "ValueSet" => "#ffc107", // warning
            "CapabilityStatement" => "#198754", // success
            "ImplementationGuide" => "#6c757d", // secondary
            "OperationDefinition" => "#0dcaf0", // info
            "SearchParameter" => "#6610f2", // purple
            _ => "#adb5bd" // gray
        };
    }
    
    private class ResourceTypeStatistic
    {
        public string Type { get; set; }
        public int Count { get; set; }
        public double Percentage { get; set; }
    }
}
