@inject FhirApiService FhirApiService

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">Validation Results</h5>
    </div>
    <div class="card-body">
        @if (Resource == null)
        {
            <div class="alert alert-info">
                Select a resource to view validation results.
            </div>
        }
        else
        {
            <h6 class="mb-3">
                Resource: <strong>@Resource.GetFormattedName()</strong>
            </h6>
            
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    @if (Resource.ValidationResults == null)
                    {
                        <span class="badge bg-secondary px-3 py-2">Not Validated</span>
                    }
                    else if (Resource.ValidationResults.IsValid == true)
                    {
                        <span class="badge bg-success px-3 py-2">Valid</span>
                    }
                    else
                    {
                        <span class="badge bg-danger px-3 py-2">Invalid</span>
                    }
                </div>
                
                <div>
                    <button type="button" class="btn btn-primary" 
                           @onclick="ValidateResource"
                           disabled="@(_isValidating)">
                        @if (_isValidating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Validating...</span>
                        }
                        else
                        {
                            <span>Validate</span>
                        }
                    </button>
                </div>
            </div>
            
            @if (Resource.ValidationResults != null)
            {
                <h6 class="mb-2">
                    Canonical URL: @(Resource.CanonicalUrl)
                </h6>
                
                <p class="small mb-3">
                    @if (Resource.ValidationResults.CanonicalUrlAccessible == true)
                    {
                        <span class="text-success">
                            <i class="bi bi-check-circle me-1"></i> URL is accessible
                        </span>
                    }
                    else if (Resource.ValidationResults.CanonicalUrlAccessible == false)
                    {
                        <span class="text-danger">
                            <i class="bi bi-x-circle me-1"></i> URL is not accessible
                        </span>
                    }
                    else
                    {
                        <span class="text-warning">
                            <i class="bi bi-question-circle me-1"></i> URL accessibility unknown
                        </span>
                    }
                </p>
                
                @if (Resource.ValidationResults.Issues?.Count > 0)
                {
                    <h6 class="mt-4 mb-2">Validation Issues</h6>
                    
                    <div class="accordion" id="validationIssues">
                        @for (int i = 0; i < Resource.ValidationResults.Issues.Count; i++)
                        {
                            var issue = Resource.ValidationResults.Issues[i];
                            var issueId = $"issue-{i}";
                            var headingId = $"heading-{i}";
                            var collapseId = $"collapse-{i}";
                            
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="@headingId">
                                    <button class="accordion-button collapsed" type="button" 
                                            data-bs-toggle="collapse" 
                                            data-bs-target="#@collapseId" 
                                            aria-expanded="false" 
                                            aria-controls="@collapseId">
                                        <div class="d-flex align-items-center">
                                            @switch (issue.Severity)
                                            {
                                                case "error":
                                                    <i class="bi bi-exclamation-circle-fill text-danger me-2"></i>
                                                    break;
                                                case "warning":
                                                    <i class="bi bi-exclamation-triangle-fill text-warning me-2"></i>
                                                    break;
                                                default:
                                                    <i class="bi bi-info-circle-fill text-info me-2"></i>
                                                    break;
                                            }
                                            @issue.Message
                                        </div>
                                    </button>
                                </h2>
                                <div id="@collapseId" class="accordion-collapse collapse" 
                                     aria-labelledby="@headingId" 
                                     data-bs-parent="#validationIssues">
                                    <div class="accordion-body">
                                        <div class="table-responsive">
                                            <table class="table table-sm">
                                                <thead>
                                                    <tr>
                                                        <th>Severity</th>
                                                        <th>Code</th>
                                                        <th>Location</th>
                                                        <th>Message</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                        <td>@issue.Severity</td>
                                                        <td>@issue.Code</td>
                                                        <td>@issue.Location</td>
                                                        <td>@issue.Message</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (Resource.ValidationResults.IsValid == true)
                {
                    <div class="alert alert-success mt-3">
                        No validation issues found. The resource is valid.
                    </div>
                }
                else
                {
                    <div class="alert alert-info mt-3">
                        No validation issues detected, but validation may be incomplete.
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info">
                    Click the Validate button to check this resource for issues.
                </div>
            }
        }
    </div>
</div>

<style>
    .accordion-button:not(.collapsed) {
        background-color: rgba(13, 110, 253, 0.05);
        color: #0a58ca;
    }
</style>

@code {
    [Parameter] public FhirResource Resource { get; set; }
    [Parameter] public EventCallback<FhirResource> OnValidationCompleted { get; set; }
    
    private bool _isValidating = false;
    
    private async Task ValidateResource()
    {
        if (Resource == null)
            return;
            
        try
        {
            _isValidating = true;
            
            var validationResult = await FhirApiService.ValidateResourceAsync(Resource.Id);
            
            if (validationResult != null)
            {
                Resource.ValidationResults = validationResult;
                await OnValidationCompleted.InvokeAsync(Resource);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error validating resource: {ex.Message}");
        }
        finally
        {
            _isValidating = false;
        }
    }
}
