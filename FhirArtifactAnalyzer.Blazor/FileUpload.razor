@using FhirArtifactAnalyzer.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@inject FhirApiService FhirApiService
@inject IJSRuntime JSRuntime

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">Upload FHIR Artifacts</h5>
    </div>
    <div class="card-body">
        <ul class="nav nav-tabs" id="uploadTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="file-upload-tab" data-bs-toggle="tab" data-bs-target="#file-upload" type="button" role="tab" aria-controls="file-upload" aria-selected="true">
                    File Upload
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="remote-url-tab" data-bs-toggle="tab" data-bs-target="#remote-url" type="button" role="tab" aria-controls="remote-url" aria-selected="false">
                    Remote URL
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="directory-scan-tab" data-bs-toggle="tab" data-bs-target="#directory-scan" type="button" role="tab" aria-controls="directory-scan" aria-selected="false">
                    Directory Scan
                </button>
            </li>
        </ul>
        
        <div class="tab-content p-3 border border-top-0 rounded-bottom" id="uploadTabsContent">
            <div class="tab-pane fade show active" id="file-upload" role="tabpanel" aria-labelledby="file-upload-tab">
                <div class="upload-zone @(_dragging ? "upload-zone-active" : "")" 
                     @ondragenter="HandleDragEnter" 
                     @ondragleave="HandleDragLeave"
                     @ondragover="HandleDragOver" @ondragover:preventDefault
                     @ondrop="HandleDrop" @ondrop:preventDefault>
                    <InputFile OnChange="HandleFileSelection" multiple class="d-none" id="fileInput" />
                    <i class="bi bi-cloud-upload fs-1 mb-2"></i>
                    <p class="mb-2">Drag and drop files here or</p>
                    <button class="btn btn-primary mb-3" @onclick="ClickFileInput">Browse Files</button>
                    <small class="d-block text-muted">Supported formats: .tgz (NPM packages), .zip, .json</small>
                    <small class="d-block text-muted">Maximum file size: 100MB</small>
                </div>
                
                @if (_isUploading)
                {
                    <div class="mt-3">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                        </div>
                        <p class="mt-2">Uploading @_currentFileName...</p>
                    </div>
                }
                
                @if (_uploadedFiles.Any())
                {
                    <div class="mt-4">
                        <h6>Uploaded Files</h6>
                        <ul class="list-group">
                            @foreach (var file in _uploadedFiles)
                            {
                                <li class="list-group-item d-flex align-items-center">
                                    <i class="bi bi-file-earmark-text text-success me-2"></i>
                                    <span>@file.Name (@(Math.Round(file.Size / 1024.0, 2)) KB)</span>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
            
            <div class="tab-pane fade" id="remote-url" role="tabpanel" aria-labelledby="remote-url-tab">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="remoteUrlInput" placeholder="https://example.com/fhir/package.tgz" 
                           @bind-value="_remoteUrl">
                    <label for="remoteUrlInput">Remote URL</label>
                    <div class="form-text">Enter a URL to a FHIR artifact (.tgz, .zip, or .json)</div>
                </div>
                
                <button class="btn btn-primary" @onclick="ProcessRemoteUrl"
                        disabled="@(_processingUrl || string.IsNullOrWhiteSpace(_remoteUrl))">
                    @if (_processingUrl)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <i class="bi bi-cloud-download me-2"></i>
                        <span>Fetch Resource</span>
                    }
                </button>
            </div>
            
            <div class="tab-pane fade" id="directory-scan" role="tabpanel" aria-labelledby="directory-scan-tab">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="directoryPathInput" placeholder="/path/to/fhir/resources" 
                           @bind-value="_directoryPath">
                    <label for="directoryPathInput">Directory Path</label>
                    <div class="form-text">Enter a path to scan for FHIR resources</div>
                </div>
                
                <div class="form-floating mb-3">
                    <input type="number" class="form-control" id="scanDepthInput" min="1" max="10" 
                           @bind-value="_scanDepth">
                    <label for="scanDepthInput">Maximum Scan Depth</label>
                </div>
                
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="filePatternInput" placeholder="\.json$" 
                           @bind-value="_filePattern">
                    <label for="filePatternInput">File Pattern (optional)</label>
                    <div class="form-text">ECMAScript 2018 regular expression</div>
                </div>
                
                <button class="btn btn-primary" @onclick="ScanDirectory"
                        disabled="@(_scanningDirectory || string.IsNullOrWhiteSpace(_directoryPath))">
                    @if (_scanningDirectory)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Scanning...</span>
                    }
                    else
                    {
                        <i class="bi bi-folder-check me-2"></i>
                        <span>Scan Directory</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .upload-zone {
        border: 2px dashed #ccc;
        border-radius: 5px;
        padding: 2rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        background-color: #f8f9fa;
    }
    
    .upload-zone-active {
        border-color: #0d6efd;
        background-color: rgba(13, 110, 253, 0.05);
    }
    
    .upload-zone:hover {
        border-color: #0d6efd;
    }
</style>

@code {
    [Parameter] public EventCallback OnUploadCompleted { get; set; }

    private bool _dragging = false;
    private bool _isUploading = false;
    private string _currentFileName = "";
    private List<IBrowserFile> _uploadedFiles = new();

    private string _remoteUrl = "";
    private bool _processingUrl = false;

    private string _directoryPath = "";
    private int _scanDepth = 5;
    private string _filePattern = "";
    private bool _scanningDirectory = false;

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        _isUploading = true;
        StateHasChanged();

        foreach (var file in e.GetMultipleFiles())
        {
            _currentFileName = file.Name;
            StateHasChanged();

            string extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (extension is not ".tgz" and not ".zip" and not ".json")
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Unsupported file type: {extension}. Please upload .tgz, .zip, or .json files.");
                continue;
            }

            if (file.Size > 100 * 1024 * 1024)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"File {file.Name} exceeds the 100MB size limit.");
                continue;
            }

            try
            {
                bool success = await FhirApiService.UploadFileAsync(file);
                if (success)
                {
                    _uploadedFiles.Add(file);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Failed to upload {file.Name}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error uploading {file.Name}: {ex.Message}");
            }
        }

        _isUploading = false;
        _currentFileName = "";
        await OnUploadCompleted.InvokeAsync();
        StateHasChanged();
    }

    private void HandleDragEnter(DragEventArgs e) => _dragging = true;
    private void HandleDragLeave(DragEventArgs e) => _dragging = false;
    private void HandleDragOver(DragEventArgs e) => _dragging = true;
    private async Task HandleDrop(DragEventArgs e)
    {
        _dragging = false;
        await JSRuntime.InvokeVoidAsync("clickElementById", "fileInput");
    }

    private async Task ClickFileInput()
    {
        
        await JSRuntime.InvokeVoidAsync("clickElementById", "fileInput");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeTabs", "uploadTabs");
        }
    }

    private async Task ProcessRemoteUrl()
    {
        if (string.IsNullOrWhiteSpace(_remoteUrl)) return;

        try
        {
            _processingUrl = true;
            bool success = await FhirApiService.FetchFromUrlAsync(_remoteUrl);

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Successfully processed URL: {_remoteUrl}");
                _remoteUrl = "";
                await OnUploadCompleted.InvokeAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to process URL: {_remoteUrl}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error processing URL: {ex.Message}");
        }
        finally
        {
            _processingUrl = false;
        }
    }

    private async Task ScanDirectory()
    {
        if (string.IsNullOrWhiteSpace(_directoryPath)) return;

        try
        {
            _ = new System.Text.RegularExpressions.Regex(_filePattern);
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Invalid regular expression: {_filePattern}");
            return;
        }

        try
        {
            _scanningDirectory = true;
            bool success = await FhirApiService.ScanDirectoryAsync(_directoryPath, _scanDepth, _filePattern);

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Successfully scanned directory: {_directoryPath}");
                _directoryPath = "";
                _filePattern = "";
                await OnUploadCompleted.InvokeAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to scan directory: {_directoryPath}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error scanning directory: {ex.Message}");
        }
        finally
        {
            _scanningDirectory = false;
        }
    }
}